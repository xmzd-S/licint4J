package libcint;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : C:\Users\10453\Desktop\notebook\libcint\cmake-build-debug\include\cint.h:15</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CINTOpt extends Structure {
	/**
	 * LMAX1**4 pointers to index_xyz<br>
	 * C type : int**
	 */
	public PointerByReference index_xyz_array;
	/** C type : int** */
	public PointerByReference non0ctr;
	/** C type : int** */
	public PointerByReference sortedidx;
	public int nbas;
	/** C type : double** */
	public PointerByReference log_max_coeff;
	/**
	 * NULL indicates not-initialized, NO_VALUE can be skipped<br>
	 * C type : PairData**
	 */
	public PairData.ByReference[] pairdata;
	public CINTOpt() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("index_xyz_array", "non0ctr", "sortedidx", "nbas", "log_max_coeff", "pairdata");
	}
	/**
	 * @param index_xyz_array LMAX1**4 pointers to index_xyz<br>
	 * C type : int**<br>
	 * @param non0ctr C type : int**<br>
	 * @param sortedidx C type : int**<br>
	 * @param log_max_coeff C type : double**<br>
	 * @param pairdata NULL indicates not-initialized, NO_VALUE can be skipped<br>
	 * C type : PairData**
	 */
	public CINTOpt(PointerByReference index_xyz_array, PointerByReference non0ctr, PointerByReference sortedidx, int nbas, PointerByReference log_max_coeff, PairData.ByReference pairdata[]) {
		super();
		this.index_xyz_array = index_xyz_array;
		this.non0ctr = non0ctr;
		this.sortedidx = sortedidx;
		this.nbas = nbas;
		this.log_max_coeff = log_max_coeff;
		if ((pairdata.length != this.pairdata.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.pairdata = pairdata;
	}
	public CINTOpt(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CINTOpt implements Structure.ByReference {
		
	};
	public static class ByValue extends CINTOpt implements Structure.ByValue {
		
	};
}
