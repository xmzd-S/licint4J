package libcint;
import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : C:\Users\10453\Desktop\notebook\libcint\cmake-build-debug\include\cint.h:100</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class CINTEnvVars extends Structure {
	/** C type : int* */
	public IntByReference atm;
	/** C type : int* */
	public IntByReference bas;
	/** C type : double* */
	public DoubleByReference env;
	/** C type : int* */
	public IntByReference shls;
	public int natm;
	public int nbas;
	public int i_l;
	public int j_l;
	public int k_l;
	public int l_l;
	/** number of cartesian components */
	public int nfi;
	public int nfj;
	/** C type : field1_union */
	public field1_union field1;
	/** C type : field2_union */
	public field2_union field2;
	/** = nfi*nfj*nfk*nfl; */
	public int nf;
	public int _padding;
	/** C type : int[4] */
	public int[] x_ctr = new int[4];
	public int gbits;
	/** = 1 if spin free, = 4 when spin included, it */
	public int ncomp_e1;
	/** corresponds to POSX,POSY,POSZ,POS1, see cint.h */
	public int ncomp_e2;
	/** e.g. = 3 for gradients */
	public int ncomp_tensor;
	/** power of x, == i_l if nabla is involved, otherwise == i_l */
	public int li_ceil;
	public int lj_ceil;
	public int lk_ceil;
	public int ll_ceil;
	/** nrys_roots * shift of (i++,k,l,j) */
	public int g_stride_i;
	/** nrys_roots * shift of (i,k++,l,j) */
	public int g_stride_k;
	/** nrys_roots * shift of (i,k,l++,j) */
	public int g_stride_l;
	/** nrys_roots * shift of (i,k,l,j++) */
	public int g_stride_j;
	public int nrys_roots;
	/** ref to cint2e.c g = malloc(sizeof(double)*g_size) */
	public int g_size;
	public int g2d_ijmax;
	public int g2d_klmax;
	public double common_factor;
	public double expcutoff;
	/**
	 * diff by sign in different g0_2d4d algorithm<br>
	 * C type : double[3]
	 */
	public double[] rirj = new double[3];
	/** C type : double[3] */
	public double[] rkrl = new double[3];
	/** C type : double* */
	public DoubleByReference rx_in_rijrx;
	/** C type : double* */
	public DoubleByReference rx_in_rklrx;
	/** C type : double* */
	public DoubleByReference ri;
	/** C type : double* */
	public DoubleByReference rj;
	/** C type : double* */
	public DoubleByReference rk;
	/** C type : field3_union */
	public field3_union field3;
	/** C type : f_g0_2e_callback* */
	public f_g0_2e_callback f_g0_2e;
	/** C type : f_g0_2d4d_callback* */
	public f_g0_2d4d_callback f_g0_2d4d;
	/** C type : f_gout_callback* */
	public f_gout_callback f_gout;
	/** C type : CINTOpt* */
	public CINTOpt.ByReference opt;
	/** C type : int* */
	public IntByReference idx;
	/** C type : double[1] */
	public double[] ai = new double[1];
	/** C type : double[1] */
	public double[] aj = new double[1];
	/** C type : double[1] */
	public double[] ak = new double[1];
	/** C type : double[1] */
	public double[] al = new double[1];
	/** C type : double[1] */
	public double[] fac = new double[1];
	/** C type : double[3] */
	public double[] rij = new double[3];
	/** C type : double[3] */
	public double[] rkl = new double[3];
	/** <i>native declaration : C:\Users\10453\Desktop\notebook\libcint\cmake-build-debug\include\cint.h:88</i> */
	public static class field1_union extends Union {
		public int nfk;
		public int grids_offset;
		public field1_union() {
			super();
		}
		public field1_union(int nfk_or_grids_offset) {
			super();
			this.grids_offset = this.nfk = nfk_or_grids_offset;
			setType(Integer.TYPE);
		}
		public field1_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends field1_union implements Structure.ByReference {
			
		};
		public static class ByValue extends field1_union implements Structure.ByValue {
			
		};
	};
	/** <i>native declaration : C:\Users\10453\Desktop\notebook\libcint\cmake-build-debug\include\cint.h:92</i> */
	public static class field2_union extends Union {
		public int nfl;
		public int ngrids;
		public field2_union() {
			super();
		}
		public field2_union(int nfl_or_ngrids) {
			super();
			this.ngrids = this.nfl = nfl_or_ngrids;
			setType(Integer.TYPE);
		}
		public field2_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends field2_union implements Structure.ByReference {
			
		};
		public static class ByValue extends field2_union implements Structure.ByValue {
			
		};
	};
	/** <i>native declaration : C:\Users\10453\Desktop\notebook\libcint\cmake-build-debug\include\cint.h:96</i> */
	public static class field3_union extends Union {
		/** C type : double* */
		public DoubleByReference rl;
		/** C type : double* */
		public DoubleByReference grids;
		public field3_union() {
			super();
		}
		/** @param rl_or_grids C type : double*, or C type : double* */
		public field3_union(DoubleByReference rl_or_grids) {
			super();
			this.grids = this.rl = rl_or_grids;
			setType(DoubleByReference.class);
		}
		public field3_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends field3_union implements Structure.ByReference {
			
		};
		public static class ByValue extends field3_union implements Structure.ByValue {
			
		};
	};
	/** <i>native declaration : C:\Users\10453\Desktop\notebook\libcint\cmake-build-debug\include\cint.h:97</i> */
	public interface f_g0_2e_callback extends Callback {
		int apply();
	};
	/** <i>native declaration : C:\Users\10453\Desktop\notebook\libcint\cmake-build-debug\include\cint.h:98</i> */
	public interface f_g0_2d4d_callback extends Callback {
		void apply();
	};
	/** <i>native declaration : C:\Users\10453\Desktop\notebook\libcint\cmake-build-debug\include\cint.h:99</i> */
	public interface f_gout_callback extends Callback {
		void apply();
	};
	public CINTEnvVars() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("atm", "bas", "env", "shls", "natm", "nbas", "i_l", "j_l", "k_l", "l_l", "nfi", "nfj", "field1", "field2", "nf", "_padding", "x_ctr", "gbits", "ncomp_e1", "ncomp_e2", "ncomp_tensor", "li_ceil", "lj_ceil", "lk_ceil", "ll_ceil", "g_stride_i", "g_stride_k", "g_stride_l", "g_stride_j", "nrys_roots", "g_size", "g2d_ijmax", "g2d_klmax", "common_factor", "expcutoff", "rirj", "rkrl", "rx_in_rijrx", "rx_in_rklrx", "ri", "rj", "rk", "field3", "f_g0_2e", "f_g0_2d4d", "f_gout", "opt", "idx", "ai", "aj", "ak", "al", "fac", "rij", "rkl");
	}
	public CINTEnvVars(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends CINTEnvVars implements Structure.ByReference {
		
	};
	public static class ByValue extends CINTEnvVars implements Structure.ByValue {
		
	};
}
